rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =====================
    // Users collection
    // - Anyone signed in can read basic info of other users
    // - Users can update only their own profile
    // =====================
    match /users/{userId} {
      // All signed-in users can get/list users (basic info)
      allow get, list: if request.auth != null;

      // A user can read their own full doc
      allow read: if request.auth != null && request.auth.uid == userId;

      // A user can update only their own profile
      allow update: if request.auth != null && request.auth.uid == userId;

      // Create allowed only for the userâ€™s own UID
      allow create: if request.auth != null && request.auth.uid == userId;

      // Delete only themselves
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // =====================
    // Training sessions
    // =====================
    match /training/{sessionId} {
      allow read: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);

      allow create, update: if request.auth != null &&
        request.resource.data.keys().hasAll(['playerId','coachId']) &&
        (request.resource.data.playerId == request.auth.uid ||
         request.resource.data.coachId == request.auth.uid);

      allow delete: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);
    }

    // =====================
    // Matches
    // =====================
    match /matches/{matchId} {
      allow read: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);

      allow create, update: if request.auth != null &&
        request.resource.data.keys().hasAll(['playerId','coachId']) &&
        (request.resource.data.playerId == request.auth.uid ||
         request.resource.data.coachId == request.auth.uid);

      allow delete: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);
    }

    // =====================
    // Goals
    // =====================
    match /goals/{goalId} {
      allow read: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);

      allow create, update: if request.auth != null &&
        request.resource.data.keys().hasAll(['playerId','coachId']) &&
        (request.resource.data.playerId == request.auth.uid ||
         request.resource.data.coachId == request.auth.uid);

      allow delete: if request.auth != null &&
        (resource.data.playerId == request.auth.uid ||
         resource.data.coachId == request.auth.uid);
    }

    // =====================
    // Schedule events
    // =====================
    match /schedule/{eventId} {
      // All signed-in users can see events
      allow read: if request.auth != null;

      // Only creator can create/update their own events
      allow create, update: if request.auth != null &&
        request.resource.data.keys().hasAll(['createdBy']) &&
        request.auth.uid == request.resource.data.createdBy;

      // Only creator can delete their event
      allow delete: if request.auth != null &&
        resource.data.createdBy == request.auth.uid;
    }

    // =====================
    // Coach-player relationships
    // =====================
    match /coach_players/{relationId} {
      // Coach can create a relation
      allow create: if request.auth != null &&
        request.resource.data.keys().hasAll(['coachId','playerEmail','status']) &&
        request.auth.uid == request.resource.data.coachId;

      // Either coach or player (by email) can read
      allow read: if request.auth != null &&
        (resource.data.coachId == request.auth.uid ||
         (request.auth.token.email != null &&
          resource.data.playerEmail == request.auth.token.email));

      // Player can accept invitation
      allow update: if request.auth != null &&
        (request.auth.token.email != null &&
         resource.data.playerEmail == request.auth.token.email &&
         resource.data.status == "pending" &&
         request.resource.data.status == "accepted");

      // Coach can delete relation
      allow delete: if request.auth != null &&
        resource.data.coachId == request.auth.uid;
    }
  }
}
